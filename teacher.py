Class Teacher:
  def __init__(self):
    model = Sequential()
    model.add(Conv2D(32,(3,3),activation=swish, kernel_initializer='he_uniform', padding='same', input_shape=(32,32,3)))
    model.add(Conv2D(32, (3, 3), activation=swish, kernel_initializer='he_uniform', padding='same'))
    model.add(MaxPooling2D((2, 2)))
    model.add(Dropout(0.2))
    model.add(Conv2D(64, (3, 3), activation=swish, kernel_initializer='he_uniform', padding='same'))
    model.add(Conv2D(64, (3, 3), activation=swish, kernel_initializer='he_uniform', padding='same'))
    model.add(MaxPooling2D((2, 2)))
    model.add(Dropout(0.2))
    model.add(Conv2D(128, (3, 3), activation=swish, kernel_initializer='he_uniform', padding='same'))
    model.add(Conv2D(128, (3, 3), activation=swish, kernel_initializer='he_uniform', padding='same'))
    model.add(MaxPooling2D((2, 2)))
    model.add(Dropout(0.2))
    model.add(Flatten())
    model.add(Dense(128, activation=swish, kernel_initializer='he_uniform'))
    model.add(Dropout(0.2))
    model.add(Dense(10, name='logits'))
    model.add(Activation('softmax'))
    model.summary()
    opt = SGD(lr=0.001, momentum=0.9)

    model.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['accuracy'])
    model.fit(train_data,train_labels,epochs=50)
    (loss,accuracy) = model.evaluate(test_data,test_labels)
    print(loss, accuracy)

    model_sans_softmax = keras.models.Model(inputs=model.input, outputs = model.get_layer('logits').output)
    new_logits = model_sans_softmax.predict(train_data)
    unsoftened_prob = new_softmax(new_logits, 1)
    print("Unsoftened probabilities " + str(unsoftened_prob[0]))
    temperature = 4
    softened_prob = new_softmax(new_logits, temperature)
    print("Softened probabilities " + str(softened_prob[0]))
